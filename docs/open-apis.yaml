swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
# host: "petstore.swagger.io"
# basePath: "/v2"
tags:
- name: "Login"
  description: "登录相关接口"
- name: "User"
  description: "用户相关接口"
- name: "tennat"
  description: "租户相关接口"
- name: "project"
  description: "项目相关接口"
- name: "Datasource"
  description: "数据源相关接口"  
- name: "Table"
  description: "工作表相关接口"
- name: "chart"
  description: "图表相关接口"
- name: "Dir"
  description: "目录相关接口"
- name: "field"
  description: "字段相关接口"
paths:
  /login:
    get:
      tags:
      - "Login"
      summary: "用户登录"
      description: "使用登录接口，自动返回session，并给予session一定的有效期。"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "用户名称"
        required: false
        type: "string"
      - name: "password"
        in: "formData"
        description: "用户密码"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        description: "用户邮箱"
        required: false
        type: "string"
      responses:
        200:
          description: "登录成功返回用户信息"
          schema:
            type: "object"
            properties:
              session:
                type: "string"
                description: "用户session"
              user:
                $ref: '#/definitions/User'
                description: "用户对象信息"
              tennat:
                $ref: '#/definitions/Tennat'
                description: "用户所在租户信息"
              projectList:
                type: "array"
                description: "用户参加的项目列表"
                items:
                  $ref: '#/definitions/Proejct'
  /logout:
    get:
      tags:
      - "Login"
      summary: "退出登录"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "session"
        in: "formData"
        description: "用户session"
        required: false
        type: "string"
      responses:
        200:
          description: "退出成功"
  /islogin:
    get:
      tags:
      - "Login"
      summary: "判断用户session是否有效"
      description: "该请求不会给session续期"
      responses:
        200:
          description: "session有效并返回用户对象"
          schema:
            type: "object"
            properties:
              session:
                type: "string"
                description: "用户session"
              user:
                $ref: '#/definitions/User'
                description: "用户对象信息"
              tennat:
                $ref: '#/definitions/Tennat'
                description: "用户所在租户信息"
              projectList:
                type: "array"
                description: "用户参加的项目列表"
                items:
                  $ref: '#/definitions/Proejct'
  /users:
    get:
      tags:
      - "User"
      summary: "获取所有用户列表"
      description: "只有管理员可以查看系统下所有的用户"
      operationId: "getUser"
      #使用时File，consumes字段必须是"multipart/form-data"，paramType必须是"form"。
      produces:
      - "application/json"
      responses:
        200:
          description: "返回一个用户列表数组"
          schema:
            type: "object"
            properties:
              userList:
                type: "array"
                items:
                  $ref: "#/definitions/User"
  /users/{userName}:
    get:
      tags:
      - "User"
      summary: "具体查询一个user的信息"
      operationId: "只有管理员可以查看一个用户的信息"
      parameters:
      - name: "userName"
        in: "path"
        description: "查询的用户名"
        required: true
        type: "string"
      responses:
        200:
          description: "返回具体用户具体信息"
          schema:
            type: "object"
            properties:
              user:
                $ref: '#/definitions/User'
        404:
          description: "没有找到该用户"
    post:
      tags:
      - "User"
      summary: "创建一个指定用户"
      description: "只有系统管理员可以创建用户，其他人不可以创建用户"
      operationId: "createUser"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "userName"
        in: "path"
        description: "用户名称"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "用户密码"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        description: "用户邮箱"
        required: true
        type: "string"
      - name: "phone"
        in: "formData"
        description: "用户电话"
        required: true
        type: "string"
      - name: "role"
        in: "formData"
        description: "用户身份"
        required: true
        type: "integer"
        format: "int64"
      - name: "tenant"
        in: "formData"
        description: "用户所属租户"
        type: "string"
        required: false
      responses:
        201:
          description: "创建成功，返回用户信息对象"
          schema:
            type: "object"
            properties:
              user:
                $ref: '#/definitions/User'
    delete:
      tags:
      - "User"
      summary: "删除一个指定用户"
      description: "只有管理员可以删除一个用户"
      parameters:
      - name: "userName"
        in: "path"
        description: "用户名称"
        required: true
        type: "string"
      responses:
        200:
          description: "删除成功"
    patch:
      tags:
      - "User"
      summary: "修改一个指定用户的属性"
      description: "管理员可以修改一个指定用户"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "userName"
        in: "path"
        description: "用户名称"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "用户密码"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        description: "用户邮箱"
        required: true
        type: "string"
      - name: "phone"
        in: "formData"
        description: "用户电话"
        required: true
        type: "string"
      - name: "role"
        in: "formData"
        description: "用户身份"
        required: false
        type: "integer"
        format: "int64"
      - name: "status"
        in: "formData"
        description: "用户状态"
        required: false
        type: "integer"
        format: "int64"
      - name: "tenant"
        in: "formData"
        description: "用户所属租户"
        type: "string"
        required: false
      responses:
        200:
          description: "修改成功，返回修改后的用户对象"
          schema:
            type: "object"
            properties:
              user:
                $ref: '#/definitions/User'
  /users/{userName}/password:
    patch:
      tags:
      - "User"
      summary: "修改一个指定用户的密码"
      description: "管理员可以任意的修改一个用户的密码，非管理员只有在输入正确的密码后才能修改"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "userName"
        in: "path"
        description: "用户名称"
        required: true
        type: "string"
      - name: "oldPWD"
        in: "formData"
        description: "用户旧密码"
        required: false
        type: "string"
      - name: "newPWD"
        in: "formData"
        description: "用户新密码"
        required: true
        type: "string"
      responses:
        200:
          description: "修改密码成功"

  /datasources/{datasourceId}:
    patch:
      tags:
      - "Datasource"
      summary: "修改一个数据源"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "datasourceId"
        in: "path"
        description: "数据源id"
        required: true
        type: "string"
      - name: "name"
        in: "formData"
        description: "数据源名称"
        required: false
        type: "string"
      - name: "type"
        in: "formData"
        description: "数据源类型"
        required: false
        type: "string"
      - name: "parameter"
        in: "formData"
        description: "数据源参数"
        required: false
        type: "string"
      - name: "useTables"
        in: "formData"
        description: "使用的数据源中的表的数组"
        required: false
        type: "string"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              datasource:
                $ref: '#/definitions/Datasource'
    get:
      tags:
      - "Datasource"
      summary: "查询一个数据源"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Datasource'

    delete:
      tags:
      - "Datasource"
      summary: "删除一个数据源"
      description: "当数据源中有注册的工作表时不能删除数据源"
      responses:
        200:
          description: OK
  /datasources:
    post:
      tags:
      - "Datasource"
      summary: "创建一个数据源"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "name"
        in: "formData"
        description: "数据源名称"
        required: true
        type: "string"
      - name: "type"
        in: "formData"
        description: "数据源类型"
        required: true
        type: "string"
      - name: "parameter"
        in: "formData"
        description: "数据源参数"
        required: true
        type: "string"
      - name: "useTables"
        in: "formData"
        description: "使用的数据源中的表的数组"
        required: true
        type: "string"
      responses:
        201:
          description: OK
          schema:
            type: "object"
            properties:
              datasource:
                $ref: "#/definitions/Datasource"
    get:
      tags:
      - "Datasource"
      summary: "查询数据源列表"
      parameters:
      - name: "dsType"
        in: "query"
        description: "数据源类型"
        required: false
        type: "string"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              datasourceList:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "integer"
                      format: "int64"
                      description: "数据源id"
                    name:
                      type: "string"
                      description: "数据源名称"
                    type:
                      $ref: '#/definitions/dsType'
                    parameter:
                      $ref: '#/definitions/DatasourcePostgres'
                    createTime:
                      type: "string"
                      description: "创建时间"
                    modifyTime:
                      type: "string"
                      description: "修改时间"
              statistics:
                description: "数据源统计信息"
                type: "array"
                items:
                  type: "object"
                  properties:
                    type:
                      $ref: '#/definitions/dsType'
                    count:
                      type: "integer"
  /datasource-test/connect:
    get:
      tags:
      - "Datasource"
      summary: "数据源连接测试"
      consumes:
      - "application/json"
      parameters:
        - name: "datasource"
          in: "body"
          description: "需要测试的数据源连接"
          required: true
          schema:
            $ref: '#/definitions/DatasourcePostgres'
      responses:
        200:
          description: OK
  /datasource-test/connect/tables:
    get:
      tags:
      - "Datasource"
      summary: "获取数据源下的表与表信息"
      consumes:
      - "application/json"
      parameters:
        - name: "datasource"
          in: "body"
          description: "需要测试的数据源连接"
          required: true
          schema:
            $ref: '#/definitions/DatasourcePostgres'
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              tables:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                      description: "描述一个数据源"
                    desc:
                      type: "string"
                      description: "表描述"
  /tables:
    post:
      tags:
      - "Table"
      summary: "批量注册一个数据源下的工作表"
      consumes:
      - "application/json"
      parameters:
        - name: "tables"
          in: "body"
          description: "需要注册的工作表"
          required: true
          schema:
            type: "object"
            properties:
              datasourceName:
                type: "string"
              tables:
                type: "array"
                items:
                  properties:
                    nativeTable:
                      description: "原生表名"
                      type: "string"
                    aliasTable:
                      description: "工作表名"
                      type: "string"
      responses:
        201:
          description: OK
  /tables/{tableName}:
    get:
      tags:
      - "Table"
      summary: "获取一个具体的工作表信息"
      parameters:
        - name: "tableName"
          in: "path"
          description: "查询的表名"
          required: true
          type: "string"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              tables:
                $ref: '#/definitions/TablePreview'
    delete:
      tags:
      - "Table"
      summary: "删除一个具体的工作表"
      description: "只有工作表没有血缘关系的时候才可以删除"
      parameters:
        - name: "tableName"
          in: "path"
          description: "删除的表名"
          required: true
          type: "string"
      responses:
        200:
          description: OK
    patch:
      tags:
      - "Table"
      summary: "同步一个远程工作表，重新描述表结构"
      description: "非原生工作表不可以同步"
      parameters:
        - name: "tableName"
          in: "path"
          description: "同步的表名"
          required: true
          type: "string"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TablePreview'
    put:
      tags:
      - "Table"
      summary: "修改一个工作表的字段"
      consumes:
      - "application/json"
      parameters:
        - name: "table"
          in: "body"
          description: "修改配置"
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                description: "表名"
              fields:
                description: "修改字段配置"
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "string"
                      description: "字段id"
                    type:
                      $ref: "#/definitions/fieldType"
                      description: "字段类型"
                    name:
                      type: "string"
                      description: "字段名称"
      responses:
        200:
          description: OK
  /table-fields/:
    post:
      tags:
      - "field"
      summary: "创建一个工作表字段"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "tableId"
          in: "formData"
          description: "所属tableId"
          required: true
          type: "string"
        - name: "name"
          in: "formData"
          description: "字段名称，这里名称不允许重名"
          required: true
          type: "string"
        - name: "type"
          in: "formData"
          description: "字段类型"
          required: true
          type: "string"
        - name: "aggregator"
          in: "formData"
          description: "生成公式"
          required: true
          type: "string"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Field'
  /fields/{fieldId}:
    delete:
      tags:
      - "field"
      summary: "删除一个工作表字段"
      parameters:
        - name: "fieldId"
          in: "path"
          description: "字段ID"
          required: true
          type: "string"
      responses:
        200:
          description: OK
    patch:
      tags:
      - "field"
      summary: "修改一个字段"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "fieldId"
          in: "path"
          description: "字段ID"
          required: true
          type: "string"
        - name: "name"
          in: "formData"
          description: "字段名称，这里名称不允许重名"
          required: false
          type: "string"
        - name: "type"
          in: "formData"
          description: "字段类型"
          required: false
          type: "string"
        - name: "aggregator"
          in: "formData"
          description: "生成公式"
          required: false
          type: "string"
      responses:
        200:
          description: OK
  /charts/{chartName}:
    post:
      tags:
      - "chart"
      summary: "新增一个图表"
      consumes:
      - "application/json"
      parameters:
      - name: "chartName"
        in: "path"
        description: "图表名称"
        required: true
        type: "string"
      - name: "chart"
        in: "body"
        description: "图表配置"
        required: true
        schema:
          $ref: '#/definitions/Chart'
      responses:
        200:
          description: OK
    get:
      tags:
      - "chart"
      summary: "查询一个具体图表的配置"
      parameters:
      - name: "chartName"
        in: "path"
        description: "图表名称"
        required: true
        type: "string"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              chart:
                $ref: '#/definitions/Chart'
    patch:
      tags:
      - "chart"
      summary: "修改一个图表"
      consumes:
      - "application/json"
      parameters:
      - name: "chartName"
        in: "path"
        description: "图表名称"
        required: true
        type: "string"
      - name: "chart"
        in: "body"
        description: "图表配置"
        required: true
        schema:
          $ref: '#/definitions/Chart'
      responses:
        200:
          description: OK
    delete:
      tags:
      - "chart"
      summary: "删除一个图表"
      responses:
        200:
          description: OK
  /chart:
    get:
      tags:
      - "chart"
      summary: "获取所有图表"
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              chartList:
                type: "array"
                items:
                  $ref: '#/definitions/Chart'

  /dir/{type}:
    get:
      tags:
      - "Dir"
      summary: "获取一个完整的树结构"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
        description: >
          获取的树的类型：
          * `TABLE` - 工作表类型的树
          * `PANEL` - 控制面板的树
        enum: [TABLE,PANEL]
      responses:
        200:
          description: OK
          schema:
            type: "object"
            properties:
              dir:
                type: "array"
                items:
                  $ref: '#/definitions/Tree'
  /dir/{type}/{name}:
    post:
      tags:
      - "Dir"
      summary: "创建一个目录"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
        description: >
          获取的树的类型：
          * `TABLE` - 工作表类型的树
          * `PANEL` - 控制面板的树
        enum: [TABLE,PANEL]
      - name: "name"
        in: "path"
        required: true
        type: "string"
        description: "目录名称"
      - name: "parent"
        in: "formData"
        required: true
        type: "string"
        description: "父节点名称，如果没有就不填"
      responses:
        201:
          description: OK
    delete:
      tags:
      - "Dir"
      summary: "删除一个目录"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
        description: >
          获取的树的类型：
          * `TABLE` - 工作表类型的树
          * `PANEL` - 控制面板的树
        enum: [TABLE,PANEL]
      - name: "name"
        in: "path"
        required: true
        type: "string"
        description: "目录名称"
      responses:
        200:
          description: OK

# 模型配置
definitions:
  Proejct:
    type: "object"
    description: "描述项目对象结构"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "项目ID"
      name:
        type: "string"
        description: "项目名称"
      desc:
        type: "string"
        description: "项目描述"
      createTime:
        type: "integer"
        format: "int64"
        description: "创建时间"
      modifyTime:
        type: "integer"
        format: "int64"
        description: "修改时间"
  Tennat:
    type: "object"
    description: "描述租户对象结构"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "租户id"
      name:
        type: "string"
        description: "租户名称"
      desc:
        type: "string"
        description: "租户描述"
      createTime:
        type: "integer"
        format: "int64"
        description: "创建时间"
      modifyTime:
        type: "integer"
        format: "int64"
        description: "修改时间"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "用户id"
      name:
        type: "string"
        description: "用户id"
      email:
        type: "string"
        description: "用户邮箱"
      phone:
        type: "string"
        description: "电话号码"
      createTime:
        type: "integer"
        format: "int64"
        description: "创建时间"
      modify_time:
        type: "integer"
        format: "int64"
        description: "创建时间"
      password:
        type: "string"
        description: "修改时间"
      role:
        type: "integer"
        format: "int64"
        description: "用户身份"
      status:
        type: "integer"
        format: "int64"
        description: "用户状态"

  Chart:
    description: "图表对象"
    type: "object"
    properties:
      name:
        type: "string"
        description: "图表名称"
      type:
        type: "string"
        description: >
          图表类型
          * `LINE` - 折线图
          * `PIE` - 饼图
          * `BAR` - 柱状图
        enum: [LINE,PIE,BAR]
      table:
        type: "string"
        description: "图表是基于那张工作表生成"
      joinChart:
        type: "array"
        description: "图表和那些图表关联绑定"
        items:
          type: "string"
      measures:
        description: "度量列表"
        type: "array"
        items:
          $ref: '#/definitions/Measure'
      dimensions:
        description: "维度列表"
        type: "array"
        items:
          $ref: '#/definitions/Dimension'
      parameter:
        type: "object"
        description: "具体的图表参数"
      where:
        description: "过滤条件"
        type: "array"
        items:
          type: "string"

  Datasource:
    description: "数据源"
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "数据源id"
      name:
        type: "string"
        description: "数据源名称"
      type:
        $ref: '#/definitions/dsType'
      parameter:
        $ref: '#/definitions/DatasourcePostgres'
      createTime:
        type: "string"
        description: "创建时间"
      modifyTime:
        type: "string"
        description: "修改时间"
      useTables:
        description: "数据源中使用的表"
        type: "array"
        items:
          $ref: '#/definitions/TableNativeInfo'

  TableNativeInfo:
    description: "数据源中用来描述第三方数据源的结构"
    type: "object"
    properties:
      tableName:
        type: "string"
        description: "表名称"
      isSelect:
        description: "是否选中"
        type: "boolean"
      isUse:
        description: "该表是否在chart中使用"
        type: "boolean"

  DatasourcePostgres:
    description: "postgres类型的疏远参数"
    type: "object"
    properties:
      address:
        type: "string"
        description: "数据库地址,host:port格式"
      database:
        type: "string"
        description: "数据库名称"
      user:
        type: "string"
        description: "用户名称"
      password:
        type: "string"
        description: "用户密码"
      extendParams:
        type: "string"
        description: "额外参数"
  DatasourceKylin:
    description: "kylin 数据源参数"
    type: "object"
    properties:
      address:
        type: "string"
        description: "数据库地址,host:port格式"
      project:
        type: "string"
        description: "kylin project"
      user:
        type: "string"
        description: "用户名称"
      password:
        type: "string"
        description: "用户密码"
      extendParams:
        type: "string"
        description: "额外参数"

  TableTree:
    description: "用于在目录树上展示工作表"
    type: "object"
    properties:
      id:
        type: "string"
        description: "table的id，一般以table_开头"
      name:
        type: "string"
        description: "工作表类型"
      dsType:
        description: "数据源类型"
        $ref: "#/definitions/dsType"
      originName:
        type: "string"
        description: "工作表原名"
      createTime:
        type: "string"
        description: "工作表创建时间"
      modifyTime:
        type: "string"
        description: "工作表创建时间"

  TablePreview:
    description: "用于预览表数据"
    type: "object"
    properties:
      id:
        type: "string"
        description: "table的id，一般以table_开头"
      name:
        type: "string"
        description: "工作表类型"
      dsType:
        description: "数据源类型"
        $ref: "#/definitions/dsType"
      type:
        type: "string"
        description: >
          工作表类型：
          * `NATIVE` - 数据库原生工作表
          * `GENERATE` - 创建工作表
        enum: [NATIVE,GENERATE]
      data:
        description: "预览数据每一个元素是一行，也是一个数组"
        type: "array"
        items:
          type: "string"
      field:
        description: "工作表预览字段"
        type: "array"
        items:
          $ref: '#/definitions/Field'
      schema:
        description: "工作表结构"
        type: "array"
        items:
          $ref: '#/definitions/Field'

  Dimension:
    description: "维度"
    type: "object"
    properties:
      field:
        description: "维度的字段"
        $ref: '#/definitions/Field'
      drillDownField:
        description: "下钻字段列表，按照顺序下钻"
        type: "array"
        items:
          $ref: '#/definitions/Field'
  Measure:
    description: "度量"
    type: "object"
    properties:
      field:
        description: "度量字段"
        $ref: '#/definitions/Field'
      math:
        type: "string"
        description: >
          度量需要的计算类型
          * `SUM` - 求和
          * `AVG` - 平均值
          * `MAX` - 最大值
          * `MIN` - 最小值
          * `COUNT` - 计数
        enum: [SUM,AVG,MAX,MIN,COUNT]
  Field:
    description: "描述一个字段"
    type: "object"
    properties:
      id:
        type: "string"
        description: "字段ID"
      originalName:
        type: "string"
        description: "字段原始名称"
      name:
        type: "string"
        description: "字段名称"
      valueType:
        type: "string"
        description: >
          字段值类型
          * `TEXT` - 文本类型
          * `NUM` - 数值类型
          * `DATE` - 日期类型
        enum: [TEXT,NUM,DATE]
      type:
        type: "string"
        description: >
          字段类型
          * `NATIVE` - 原生字段
          * `GENERATE` - 生成字段
        enum: [NATIVE,GENERATE]
      parameter:
        type: "object"
        description: "这里描述了一些字段的配置，如果排序规则，显示规则等"
      aggregator:
        type: "string"
        description: "用户填写的生成表达式,类似[字段1]+[字段2]"
      createTime:
        type: "string"
        description: "字段创建时间"
      modifyTime:
        type: "string"
        description: "字段修改时间"
  expression:
    description: "描述一个表达式"
    properties:
      fieldLeft:
        type: "string"
        description: "左值字段形如：table.field"
      type:
        type: "string"
        description: >
          计算类型
          * `EQ` - 等于
          * `NE` - 不等于
          * `GT` - 大于
          * `LT` - 小于
          * `GE` - 大于等于
          * `LE` - 小于等于
        enum: [EQ,NE,GT,LT,GE,LE]

      fieldRight:
        type: "object"
        description: "右值字段形如，根据表达式"
  Tree:
    type: "object"
    description: "描述一个目录"
    properties:
      id:
        description: "id"
        type: "integer"
        format: "int32"
      name:
        description: "名称"
        type: "string"
      type:
        type: "string"
        description: >
          类型:
          * `DIR` - 目录
          * `TABLE` - 工作表
          * `PANEL` - 面板
        enum: [DIR,TABLE,PANEL]
      child:
        description: "孩子节点"
        type: "array"
        items:
          $ref: '#/definitions/Tree'
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  fieldType:
    type: "string"
    description: >
      字段类型：
          * `TEXT` - 文本类型
          * `NUM` - 数值类型
          * `DATE` - 日期类型
    enum: [TEXT,NUM,DATE]
  dsType:
    type: "string"
    description: >
      数据库类型：
          * `MYSQL` - mysql
          * `POSTGRES` - postgresql
          * `KYLIN` - kylin
          * `CSV` - csv 文件
    enum: [MYSQL,POSTGRES,KYLIN,CSV]
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /biapis/biapis/1.0.0
schemes:
 - https
 - http